(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{507:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("原因：var 声明和变量提升（Hoisting）机制。")]),s._v(" "),a("h2",{attrs:{id:"块级声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级声明"}},[s._v("#")]),s._v(" 块级声明")]),s._v(" "),a("p",[s._v("块级声明用于声明在指定块之外无法访问的变量")]),s._v(" "),a("p",[s._v("块级作用域（词法作用域）：")]),s._v(" "),a("ul",[a("li",[s._v("函数内部")]),s._v(" "),a("li",[s._v("块中{}")])]),s._v(" "),a("h3",{attrs:{id:"let-声明（变量）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-声明（变量）"}},[s._v("#")]),s._v(" let 声明（变量）")]),s._v(" "),a("p",[s._v("用 let 替代 var 来声明变量，可以把变量作用域限制在当前代码块中。由于 let 声明不会被提升，因此开发者通常使用 let 声明语句放在封闭代码块的顶部，一遍整个代码块都可以访问。")]),s._v(" "),a("h3",{attrs:{id:"禁止重声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止重声明"}},[s._v("#")]),s._v(" 禁止重声明")]),s._v(" "),a("p",[s._v("同一作用域中不能用 let 重复定义已经存在的标识符，否则会抛出错误。但如果当前作用域内嵌另一个作用域，便可在内嵌作用域中用 let 声明同名变量。")]),s._v(" "),a("h3",{attrs:{id:"const-声明（常量）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const-声明（常量）"}},[s._v("#")]),s._v(" const 声明（常量）")]),s._v(" "),a("ul",[a("li",[s._v("const 和 let 声明的都是块级标识符")]),s._v(" "),a("li",[s._v("其值一旦被设定都不可更改（不可再次赋值）")]),s._v(" "),a("li",[s._v("每个通过 const 声明的常量必须进行初始化（赋值）")]),s._v(" "),a("li",[a("strong",[s._v("和其他语言中常量不同的是：es6 中如果常量是对象，则对象中的值可以修改（修改对象的属性值）")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Nicholas"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可以修改对象属性的值")]),s._v("\nperson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greg"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 抛出语法错误")]),s._v("\nperson "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greg"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("修改绑定的值不会报错，但直接给 person 赋值，既修改 person 的绑定，会抛出错误。\n"),a("strong",[s._v("const 声明不允许修改绑定，但允许修改绑定的值")])]),s._v(" "),a("h3",{attrs:{id:"临时死区（temporal-dead-zone-tdz）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临时死区（temporal-dead-zone-tdz）"}},[s._v("#")]),s._v(" 临时死区（Temporal Dead Zone/TDZ）")]),s._v(" "),a("ul",[a("li",[s._v("临时死区（Temporal Dead Zone/TDZ），常被用来描述 let 和 const 的不提示效果")]),s._v(" "),a("li",[s._v("只有执行过变量声明语句后，变量才会从 TDZ 中移出，然后才能正常访问")]),s._v(" "),a("li",[s._v("但在 let 声明的作用域外对变量使用 typeof 则不会报错：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "undefined"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'blue'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v('typeof 是在声明变量 value 的代码块外执行的，此时 value 并不在 TDZ 中。也就意味着不存在 value 这个绑定，typeof 最终返回"undefined"')]),s._v(" "),a("h2",{attrs:{id:"循环中的块作用域绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的块作用域绑定"}},[s._v("#")]),s._v(" 循环中的块作用域绑定")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("prosess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i在这里不可访问，抛出错误")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"循环中的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的函数"}},[s._v("#")]),s._v(" 循环中的函数")]),s._v(" "),a("ul",[a("li",[s._v("长久以来，var 声明让开发者在循环中创建函数变得异常困难，因为变量到了循环之外仍能访问。ES6 中 let 和 const 提供的块级绑定让我们无需再这么折腾")]),s._v(" "),a("li",[s._v("开发者在循环中使用立即调用函数表达式（IIFE），以强制生成计数器变量的副本")])]),s._v(" "),a("h3",{attrs:{id:"循环中的-let-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的-let-声明"}},[s._v("#")]),s._v(" 循环中的 let 声明")]),s._v(" "),a("ul",[a("li",[s._v("每次循环的时候 let 声明都会创建一个新变量 i，并将其初始化为 i 的当前值")]),s._v(" "),a("li",[a("strong",[s._v("let 声明在循环内部的行为是标准中专门定义的，它不一定与 let 的不提升特性相关，理解这点至关重要")])])]),s._v(" "),a("h3",{attrs:{id:"循环中的-const-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的-const-声明"}},[s._v("#")]),s._v(" 循环中的 const 声明")]),s._v(" "),a("ul",[a("li",[s._v("对应 for 循环，可以在初始化变量时使用 const，但更改这个变量时就会抛出错误")]),s._v(" "),a("li",[s._v("在 for-in 和 for-of 循环中，因为在每次迭代不会修改已有绑定，而是创建一个新绑定，所以不会抛出错误")])]),s._v(" "),a("h2",{attrs:{id:"全局块作用域绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局块作用域绑定"}},[s._v("#")]),s._v(" 全局块作用域绑定")]),s._v(" "),a("ul",[a("li",[s._v("当 var 被用于全局作用域时，它会创建一个新的全局变量作为全局对象（浏览器环境中的 window 对象）的属性")]),s._v(" "),a("li",[s._v("如果不想为全局对象创建属性，使用 let 和 const 则安全得多")]),s._v(" "),a("li",[s._v("如果希望在全局对象下定义变量，仍然可以使用 var。这种情况常见于在浏览器中跨 frame 或跨 window 访问")])]),s._v(" "),a("h2",{attrs:{id:"块级绑定最佳实践的进化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级绑定最佳实践的进化"}},[s._v("#")]),s._v(" 块级绑定最佳实践的进化")]),s._v(" "),a("p",[a("strong",[s._v("新的理念：")]),s._v("\n默认使用 const，只有确实需要改变变量的值时使用 let。因为大部分变量的值在初始化后不应再改变，而预料之外的变量值的改变是很多 bug 的源头。（某种程度上实现代码的不可变，从而防止某些错误的产生）。")])])}),[],!1,null,null,null);t.default=e.exports}}]);